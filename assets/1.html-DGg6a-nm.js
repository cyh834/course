import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-B6FKvzGf.js";const l="/course/3499638355.jpg",n="/course/4037337822.jpg",h={},d=a(`<p>主要参考清华大学电子工程系学生科协软件部的培训资料</p><h2 id="linux简介" tabindex="-1"><a class="header-anchor" href="#linux简介"><span>Linux简介</span></a></h2><p>Linux是一个开源的操作系统（OS）,类似Windows。主要负责系统内存管理、软件程序管理、硬件设备管理和文件系统管理。在用户与操作系统之间需要应用程序作为桥梁，帮助用户与操作系统进行交互，实现各种功能。</p><p>Debian,Ubuntu,RedHat,Centos等软件厂商或社区，在Linux的基础上加了一堆软件，形成了各种不同的发行版。</p><h2 id="shell" tabindex="-1"><a class="header-anchor" href="#shell"><span>Shell</span></a></h2><p>应用程序与用户的交互有两种表现形式，一种是我们常见的 GUI（Graphical User Interface），即图形用户界面，我们可以用鼠标点点点；另一种是 CLI（Command Line Interface），即命令行界面。</p><p>Terminal，终端，是人与计算机进行交互的接口。早期终端一般是电传打字机（TTY）,现在变成了操作系统中的软件——终端模拟器。它可以捕获你的键盘输入，发送给命令行应用程序，拿到输出结果后再调用图形接口，将输出渲染至屏幕上。</p><p>Shell，即“壳层”，是帮助用户与内核交互的一类程序。操作系统内核直接负责管理计算机硬件，处于操作系统最底层，由于其重要性是不能轻易由用户直接操作的，因此需要有Shell程序来作为用户操作系统的入口。Shell是一类程序，可以有CLI形式的（如sh、bash、zsh；cmd、powershell等），也可以有GUI形式的（如Windows资源管理器explorer.exe等）。</p><p>用户所看见的界面通常是终端，在用户用键盘和鼠标输入后，终端（Terminal）将这些输入发送给你选用的壳层（Shell），Shell解析你的命令发送给操作系统内核去执行，并把执行结果返回给终端，终端调用图形接口将结果显示到屏幕上。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我不希望讲义只是一堆概念堆砌而成，看得人昏昏欲睡。我更倾向于一边学一边实践。</p></div><div class="hint-container important"><p class="hint-container-title">安装Linux</p><p>在电脑安装Linux,双系统/虚拟机/WSL2皆可。初学者建议选择Ubuntu24.04，但你想选nixos什么的也可以。</p></div><p>打开终端，输入<code>echo $SHELL</code> 一般来说会输出<code>/bin/bash</code>，这就是你目前的shell。以后你可能会遇到一些非<code>bash</code>的shell脚本,比如<code>csh</code>。你通常把shell需要切换成<code>csh</code>，否则该脚本可以无法正常运行。</p><h2 id="linux命令行工具" tabindex="-1"><a class="header-anchor" href="#linux命令行工具"><span>Linux命令行工具</span></a></h2><p>直接看jyy的吧:<a href="https://ysyx.oscc.cc/docs/ics-pa/linux.html" target="_blank" rel="noopener noreferrer">Linux入门教程</a></p><h2 id="文本编辑器vim" tabindex="-1"><a class="header-anchor" href="#文本编辑器vim"><span>文本编辑器vim</span></a></h2><p>也有现成的😏:<a href="https://ysyx.oscc.cc/docs/ics-pa/0.4.html" target="_blank" rel="noopener noreferrer">Configuring vim</a></p><h2 id="linux用户管理" tabindex="-1"><a class="header-anchor" href="#linux用户管理"><span>Linux用户管理</span></a></h2><p>Linux是一个多用户系统，在多用户同时使用服务器时这一点体现尤为明显。每个用户账号都拥有一个唯一的用户名和密码。用户在登录时键入正确的用户名和密码后，会进入自己的主目录（通常是<code>/home/用户名</code>，缩写为<code>~</code>）。</p><p>用户对系统中各种文件的访问权限取决于所登录的账户，同时为了管理涉及共享资源的一组用户，采用了&quot;用户组&quot;的概念。每个用户有唯一的UID，每个组有唯一的GID。</p><p>我们可以：</p><ul><li>新建用户 useradd</li><li>切换用户 username</li><li>修改密码 passwd</li><li>修改已建立用户的属性 usermod</li><li>查看用户 cat /etc/passwd</li><li>删除用户 userdel</li></ul><h3 id="赋予用户超级用户权限" tabindex="-1"><a class="header-anchor" href="#赋予用户超级用户权限"><span>赋予用户超级用户权限</span></a></h3><p>新用户没有权限使用sudo命令，我们可以切换回root通过修改<code>/etc/sudoers</code>文件来设置用户权限。注意，该文件如果修改错误会产生严重的影响，因此不要直接用文本编辑器修改，而是用visudo工具进行修改。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> visudo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>权限配置的格式如下：</p><div class="language-vim line-numbers-mode" data-highlighter="shiki" data-ext="vim" data-title="vim" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root  ALL         = (ALL        : ALL    ) ALL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">用户名 允许登录的主机 可使用的用户身份 可使用的组 可使用的命令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">%sudo ALL=(ALL:ALL) ALL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以见到<code>%admin</code>和<code>%sudo</code>这样的名字，它们是组名。所以要给一个用户赋予sudo权限，可以直接将其添加到 sudo 组中。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -aG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> username</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>/etc/sudoers</code>中还有一些其他有趣的配置。例如，添加一行如下代码可以让下次输入sudo密码时不是什么都不显示，而是显示星号：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Defaults pwfeedback</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">显示星号</p><p>不试一下？</p></div><h3 id="用户组" tabindex="-1"><a class="header-anchor" href="#用户组"><span>用户组</span></a></h3><p>一个组中可以有多个用户，一个用户也可以在多个组中。 当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组存储在<code>/etc/group</code>中，称为附加组。</p><h4 id="查看用户组-etc-group" tabindex="-1"><a class="header-anchor" href="#查看用户组-etc-group"><span>查看用户组<code>/etc/group</code></span></a></h4><p>每行用户组信息都以 &quot;:&quot; 作为分隔符，划分为4个字段，每个字段所表示的含义如下： 组名 : 用户组密码（一般没有密码） : GID : 组内用户列表（如果某用户的主组是该组，该用户不会在 这里显示）。</p><h4 id="用户组操作" tabindex="-1"><a class="header-anchor" href="#用户组操作"><span>用户组操作</span></a></h4><ul><li>新建用户组： groupadd</li><li>修改用户组： groupmod</li><li>删除用户组： groupdel</li><li>切换用户组： newgrp</li><li>查看用户所属的组： groups username 如果想将某个用户添加到某个组，可以使用<code>usermod -aG groupname username</code>；想将某个用户从 指定的组中删除，可以使用<code>gpasswd -d username groupname</code>。</li></ul><h3 id="用户-用户组权限" tabindex="-1"><a class="header-anchor" href="#用户-用户组权限"><span>用户/用户组权限</span></a></h3><h4 id="查看文件权限" tabindex="-1"><a class="header-anchor" href="#查看文件权限"><span>查看文件权限</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ll (约等于 ls -al) 或 ls -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会得到若干条这样的记录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>drwxr-xr-x 3 root root 4096 May 18 2022 ../</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一段的 drwxr-xr-x 表示文件类型及权限： <img src="`+l+`" alt="img" loading="lazy"> 文件类型常见的有d（目录）、-（文件）、l（链接）。接下来以三个字母为一组表明了文件权限：属主权限指的是文件所有者对该文件的权限， 属组权限指的是文件所有者的同组用户对该文件的权限，其他用户权限顾名思义。r、w、x分别代表读、写和执行的权限，如果没有此项权限则会出现减号。</p><p>第二段的 3 表示有三个硬链接指向该文件对应的节点。</p><p>第三段的 root 表示文件属主，第四段的 root 表示文件属组，4096为文件大小，其后是修改日期，和 文件名</p><h4 id="修改文件权限-chmod" tabindex="-1"><a class="header-anchor" href="#修改文件权限-chmod"><span>修改文件权限 chmod</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [–R] [u/g/o/a][+/-/</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][r/w/x] [file]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中u（user）代表改变属主的权限，g（group）代表改变属组的权限，o（owner）代表改变其他用户的权限，a（all）代表改变所有用户的权限。+代表增加权限，-代表删除已有权限，=代表设定权限。r/w/x代表读、写、执行。如果加上-R，则表明要递归修改权限，如果文件参数是一个目录，就会将该目录下的所有文件都修改。</p><h4 id="修改文件属主和属组-chown" tabindex="-1"><a class="header-anchor" href="#修改文件属主和属组-chown"><span>修改文件属主和属组 chown</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [–R] [owner] [file]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-R] [owner]:[group] [file]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过 chgrp 来单独修改属组。</p><h2 id="shell环境变量" tabindex="-1"><a class="header-anchor" href="#shell环境变量"><span>Shell环境变量</span></a></h2><p>环境变量是存储有关<code>shell</code>的工作环境的数据，以便程序或<code>shell</code>中运行的脚本能够访问到它们。系统会创建好一些环境变量，我们在安装新程序等操作时也要留意是否需要设置环境变量，否则会出现“command not found”的错误。</p><h3 id="查看环境变量" tabindex="-1"><a class="header-anchor" href="#查看环境变量"><span>查看环境变量</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>env # 查看全部全局变量</span></span>
<span class="line"><span>printenv HOME # 查看个别全局变量（HOME）</span></span>
<span class="line"><span>echo $HOME # 查看个别全局变量（HOME）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用环境变量" tabindex="-1"><a class="header-anchor" href="#常用环境变量"><span>常用环境变量</span></a></h4><ul><li>HOME ：当前用户的主目录</li><li>PATH ： shell 查找命令的目录列表，由冒号分隔</li><li>PWD ：当前工作目录</li></ul><h3 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量"><span>设置环境变量</span></a></h3><p>可通过将局部变量导出到环境当中来设置环境变量，在该进程及其所创建的子进程中，该环境变量都是可见的，且子进程中的修改不会作用到父进程的环境变量。但是，这种设置是临时的，一旦退出当前shell就消失了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>variable=&quot;test&quot;</span></span>
<span class="line"><span>export variable # 导出环境变量</span></span>
<span class="line"><span>unset variable # 删除环境变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如想设置持久的环境变量，就需要修改系统启动时用于加载环境变量的文件。这些文件各自有不同功能，首先，/etc目录下的文件是系统级的，所有用户的终端都会加载；而~/也就是用户主目录下的文件是用户级的，只有该用户的终端会加载。其次，profile文件在交互式登录shell当中加载，而bashrc文件在交互式非登录shell当中加载，不过由于profile文件当中引用了bashrc文件中的环境变量，因此也可认为在登录shell当中将二者都加载了。所谓登录就是指“用户登录到系统的shell” ，而其他的都是非登录shell。 因此，一般我们修改的文件有以下四个（其实绝大多数情况下修改~/.bashrc就够了）:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/etc/profile # 系统级，登录shell当中加载</span></span>
<span class="line"><span>/etc/bashrc # 系统级，可认为都会被加载</span></span>
<span class="line"><span>~/.profile # 用户级，登录shell当中加载</span></span>
<span class="line"><span>~/.bashrc # 用户级，可认为都会被加载</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改PATH环境变量时，一般采用追加导出的方式，即在文件的最后一行加上：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export PATH=/usr/local/src/mongodb/bin:$PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想不重启终端使设置的环境变量立即生效，可以用source命令。source命令本意是在当前shell中依次执行一个文件中的每行命令，而不像sh file name与./file name 那样会建立一个子shell。通过执行profile或者bashrc中的全部命令，就重置了当前shell的全部环境变量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>source [file name]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="shell脚本" tabindex="-1"><a class="header-anchor" href="#shell脚本"><span>shell脚本</span></a></h2><p>如果不想每次都敲一遍命令，我们可以写个shell脚本 打开文本编辑器，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span># 注释</span></span>
<span class="line"><span>a=1         # 定义变量</span></span>
<span class="line"><span>echo $a     # 输出a的值</span></span>
<span class="line"><span>echo $HOME  # 输出环境变量</span></span>
<span class="line"><span>unset a     # 删除变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#!</code>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。 echo 命令用于向窗口输出文本。</p><p>此外还能写条件、循环语句</p><h3 id="运行-shell-脚本" tabindex="-1"><a class="header-anchor" href="#运行-shell-脚本"><span>运行 Shell 脚本</span></a></h3><p>有两种方法：</p><ol><li>作为可执行程序 将上面的代码保存为 test.sh，并 cd 到相应目录：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chmod +x ./test.sh  #使脚本具有执行权限</span></span>
<span class="line"><span>./test.sh  #执行脚本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><ol start="2"><li>作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/bin/sh test.sh</span></span>
<span class="line"><span>/bin/php test.php</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><div class="hint-container important"><p class="hint-container-title">编写shell脚本</p><p>编写shell脚本，求1到100的奇数和，输出结果重定向到 result.txt</p></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p>一种用于字符串匹配的编程语言</p><ul><li>匹配能力比通配符强大很多</li><li>一般配合grep, awk, sed, vim等工具使用 例: 匹配email <img src="`+n+'" alt="img" loading="lazy"> 可能你觉得这多少有点复杂，但如果是让你在海量文本中提取出几千个email？</li></ul>',83),t=[d];function r(p,c){return e(),s("div",null,t)}const k=i(h,[["render",r],["__file","1.html.vue"]]),b=JSON.parse('{"path":"/software/Lab0/1.html","title":"Linux","lang":"zh-CN","frontmatter":{"title":"Linux","icon":"lightbulb"},"headers":[{"level":2,"title":"Linux简介","slug":"linux简介","link":"#linux简介","children":[]},{"level":2,"title":"Shell","slug":"shell","link":"#shell","children":[]},{"level":2,"title":"Linux命令行工具","slug":"linux命令行工具","link":"#linux命令行工具","children":[]},{"level":2,"title":"文本编辑器vim","slug":"文本编辑器vim","link":"#文本编辑器vim","children":[]},{"level":2,"title":"Linux用户管理","slug":"linux用户管理","link":"#linux用户管理","children":[{"level":3,"title":"赋予用户超级用户权限","slug":"赋予用户超级用户权限","link":"#赋予用户超级用户权限","children":[]},{"level":3,"title":"用户组","slug":"用户组","link":"#用户组","children":[]},{"level":3,"title":"用户/用户组权限","slug":"用户-用户组权限","link":"#用户-用户组权限","children":[]}]},{"level":2,"title":"Shell环境变量","slug":"shell环境变量","link":"#shell环境变量","children":[{"level":3,"title":"查看环境变量","slug":"查看环境变量","link":"#查看环境变量","children":[]},{"level":3,"title":"设置环境变量","slug":"设置环境变量","link":"#设置环境变量","children":[]}]},{"level":2,"title":"shell脚本","slug":"shell脚本","link":"#shell脚本","children":[{"level":3,"title":"运行 Shell 脚本","slug":"运行-shell-脚本","link":"#运行-shell-脚本","children":[]}]},{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]}],"git":{"createdTime":1725774428000,"updatedTime":1725774428000,"contributors":[{"name":"cyh","email":"1909625265@qq.com","commits":1}]},"readingTime":{"minutes":9.85,"words":2954},"filePathRelative":"software/Lab0/1.md","localizedDate":"2024年9月8日"}');export{k as comp,b as data};
